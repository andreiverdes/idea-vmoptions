################################################################################
# JVM Options for Maximizing Android Studio Performance
################################################################################

# Run the JVM in server mode, which is optimized for long-running, performance-
# critical applications. Server mode uses more aggressive JIT optimizations.
# More info: https://docs.oracle.com/javase/8/docs/technotes/guides/vm/server.html
-server

# Set the initial Java heap size to 8192 MB (8GB). This is the amount of memory
# allocated for object allocation at startup. A larger initial heap can reduce
# early garbage collections.
-Xms8192m

# Set the maximum Java heap size to 20480 MB (20GB). This limits the heap size to
# prevent excessive memory usage.
-Xmx20480m

# Reserve up to 1024 MB (1GB) for the JIT-compiled code cache. The code cache stores
# native code generated by the Just-In-Time compiler. A larger code cache can help
# performance in applications with many methods.
# More info: https://wiki.openjdk.org/display/HotSpot/Code+Cache
-XX:ReservedCodeCacheSize=1024m

# Enable compressed ordinary object pointers (Oops), which reduce pointer sizes
# from 64 bits to 32 bits (when possible), saving memory and potentially improving
# cache performance.
-XX:+UseCompressedOops

# Set the default file encoding to UTF-8. This ensures consistent character encoding
# across platforms.
-Dfile.encoding=UTF-8

# Configure the soft reference LRU policy: for every MB of heap, soft references are
# kept for approximately 50 milliseconds before they become eligible for GC.
# More info: https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/softrefs.html
-XX:SoftRefLRUPolicyMSPerMB=50

# Enable assertions. (Useful during development; consider disabling for production.)
# -ea

# Disable assertions. Assertions are primarily used during development to catch programming
# errors, so disabling them in production can offer a slight performance boost by removing
# the overhead of checking assertion conditions.
-da

# Disable certain HTTP authentication tunneling schemes, which can affect network
# performance in some environments.
-Djdk.http.auth.tunneling.disabledSchemes=""

# Automatically generate a heap dump when an OutOfMemoryError occurs, which is
# useful for post-mortem analysis.
-XX:+HeapDumpOnOutOfMemoryError

# Do not omit full stack traces in repeated exceptions (helps with debugging).
-XX:-OmitStackTraceInFastThrow

# Specify the file path for error logs (using the user's home directory).
-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log

# Specify the file path for heap dumps.
-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof

# Disable platform update checks within the IDE to reduce background tasks.
-Dide.no.platform.update=true

# Disable the canonical prefix cache. This can sometimes help with file path
# resolution performance if you notice delays.
-Dsun.io.useCanonPrefixCache=false

# Enable the G1 Garbage Collector (G1GC), which is generally well-suited for
# applications with large heaps.
-XX:+UseG1GC

# Limit the number of JIT compiler threads to 2. Adjust this based on your CPU.
-XX:CICompilerCount=8

# Allow the JVM to attach to itself. This is used by diagnostic tools that need
# to introspect the running JVM.
-Djdk.attach.allowAttachSelf=true

# Enable the Concurrent Mark Sweep (CMS) Garbage Collector.
# NOTE: Enabling both G1GC and CMS simultaneously is unusual and may lead to conflicts.
# Typically, you would choose one garbage collector. Remove this if using G1GC exclusively.
-XX:+UseConcMarkSweepGC

# Prefer IPv4 over IPv6 for networking operations. This can avoid issues on networks
# where IPv6 support is problematic.
-Djava.net.preferIPv4Stack=true

# Disable coroutine debug agent to reduce overhead (useful in production).
-Dkotlinx.coroutines.debug=off

# Silence warnings about illegal reflective access during module operations.
-Djdk.module.illegalAccess.silent=true

# JetBrains Toolbox integration options (used if you're managing Android Studio via Toolbox).
-Dide.managed.by.toolbox=/Applications/JetBrains Toolbox.app/Contents/MacOS/jetbrains-toolbox
-Dtoolbox.notification.token=411372ef-0e2c-4fd6-9a43-cf00c1574999
-Dtoolbox.notification.portFile=/Users/andrei/Library/Caches/JetBrains/Toolbox/ports/66c8dcb3-90b1-4b1d-88b6-2859054f5db3.port

# Enable the new Kotlin K2 compiler if applicable.
-Didea.kotlin.plugin.use.k2=true
